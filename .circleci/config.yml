
version: 2.1

jobs:
  build:
    docker:
    # Use the same Docker base as the project
    - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 && \
            chmod +x /bin/hadolint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  build-docker-image:
    # https://circleci.com/blog/learn-iac-part3/
    docker:
      - image: circleci/node:12
    working_directory: ~/repo
    steps:
        - checkout
        - setup_remote_docker:
            # https://circleci.com/docs/2.0/building-docker-images/
            version: 20.10.14
            docker_layer_caching: false
        - run:
           name: Build docker container
           command: |
               echo $DOCKER_IMAGE_NAME
               #docker build -t $DOCKER_LOGIN/$DOCKER_IMAGE_NAME .
               #docker image ls
               #echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
               #docker push $DOCKER_LOGIN/$DOCKER_IMAGE_NAME
  
  setup-eks-cluster:
    # https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html
    docker:
      - image: circleci/node:12
    working_directory: ~/repo
    steps:
      - checkout
      - run:
           name: install eksctl
           command: |              
              curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
              /tmp/eksctl version
      - run:
            # https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html
            name: setup eks cluster
            command: |
                /tmp/eksctl create cluster \
                    --name $CLUSTER_NAME \
                    --nodes 2 \
                    --region us-east-1 \
                    --zones us-east-1a,us-east-1b \
                    --nodegroup-name p5CapstoneNodeGroup \
                    --node-type t2.micro | tee ~/eks_results.txt
                
                echo "Already exists: $(grep -q "already exits" ~/eks_results.txt)"
                echo "Region ready: $(grep -q "region is ready" ~/eks_results.txt)"

                # if it already exists, or finished successfully, call it good 
                if grep -q "already exists" ~/eks_results.txt
                then
                  return 1
                elif grep -q  "region is ready" ~/eks_results.txt
                then
                  return 1
                else
                  return 0
                fi
            
            # cluster creation takes a while
            no_output_timeout: 30m

  deploy-to-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
         name: update kubeconfig for cluster
         # https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/
         command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
            aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $CLUSTER_NAME
      - run:
         name: deploy the application and service 
         command: |
            kubectl apply -f ./k8s/deployment.yml
            sleep 60s
            kubectl get deployments
            kubectl apply -f ./k8s/service.yml
            sleep 60s
            kubectl get svc
                                    
workflows:
  default:
    jobs:
      - build
      - build-docker-image:
          requires: 
            - build
      - setup-eks-cluster:
           requires:
            - build-docker-image
      - deploy-to-cluster:
          requires:
           - setup-eks-cluster 
